// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: papers/paper.proto

package papers

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Paper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doi                  string                `protobuf:"bytes,1,opt,name=doi,proto3" json:"doi,omitempty"`
	Year                 int32                 `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	Genre                string                `protobuf:"bytes,3,opt,name=genre,proto3" json:"genre,omitempty"`
	IsOa                 bool                  `protobuf:"varint,4,opt,name=is_oa,json=isOa,proto3" json:"is_oa,omitempty"`
	Title                string                `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	DoiUrl               string                `protobuf:"bytes,6,opt,name=doi_url,json=doiUrl,proto3" json:"doi_url,omitempty"`
	Updated              string                `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
	OaStatus             string                `protobuf:"bytes,8,opt,name=oa_status,json=oaStatus,proto3" json:"oa_status,omitempty"`
	Publisher            string                `protobuf:"bytes,9,opt,name=publisher,proto3" json:"publisher,omitempty"`
	ZAuthors             []*Author             `protobuf:"bytes,10,rep,name=z_authors,json=zAuthors,proto3" json:"z_authors,omitempty"`
	IsParatext           bool                  `protobuf:"varint,11,opt,name=is_paratext,json=isParatext,proto3" json:"is_paratext,omitempty"`
	JournalName          string                `protobuf:"bytes,12,opt,name=journal_name,json=journalName,proto3" json:"journal_name,omitempty"`
	OaLocations          []*OpenAccessLocation `protobuf:"bytes,13,rep,name=oa_locations,json=oaLocations,proto3" json:"oa_locations,omitempty"`
	DataStandard         int32                 `protobuf:"varint,14,opt,name=data_standard,json=dataStandard,proto3" json:"data_standard,omitempty"`
	JournalIsOa          bool                  `protobuf:"varint,15,opt,name=journal_is_oa,json=journalIsOa,proto3" json:"journal_is_oa,omitempty"`
	JournalIssns         string                `protobuf:"bytes,16,opt,name=journal_issns,json=journalIssns,proto3" json:"journal_issns,omitempty"`
	JournalIssnL         string                `protobuf:"bytes,17,opt,name=journal_issn_l,json=journalIssnL,proto3" json:"journal_issn_l,omitempty"`
	PublishedDate        string                `protobuf:"bytes,18,opt,name=published_date,json=publishedDate,proto3" json:"published_date,omitempty"`
	BestOaLocation       *OpenAccessLocation   `protobuf:"bytes,19,opt,name=best_oa_location,json=bestOaLocation,proto3" json:"best_oa_location,omitempty"`
	FirstOaLocation      *OpenAccessLocation   `protobuf:"bytes,20,opt,name=first_oa_location,json=firstOaLocation,proto3" json:"first_oa_location,omitempty"`
	JournalIsInDoai      bool                  `protobuf:"varint,21,opt,name=journal_is_in_doai,json=journalIsInDoai,proto3" json:"journal_is_in_doai,omitempty"`
	HasRepositoryCopy    bool                  `protobuf:"varint,22,opt,name=has_repository_copy,json=hasRepositoryCopy,proto3" json:"has_repository_copy,omitempty"`
	OaLocationsEmbargoed []*OpenAccessLocation `protobuf:"bytes,23,rep,name=oa_locations_embargoed,json=oaLocationsEmbargoed,proto3" json:"oa_locations_embargoed,omitempty"`
	Id                   string                `protobuf:"bytes,24,opt,name=id,proto3" json:"id,omitempty"`
	Glutton              *Glutton              `protobuf:"bytes,25,opt,name=glutton,proto3" json:"glutton,omitempty"`
	IstexId              string                `protobuf:"bytes,26,opt,name=istexId,proto3" json:"istexId,omitempty"`
	ValidFulltextPdf     bool                  `protobuf:"varint,27,opt,name=valid_fulltext_pdf,json=validFulltextPdf,proto3" json:"valid_fulltext_pdf,omitempty"`
}

func (x *Paper) Reset() {
	*x = Paper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paper) ProtoMessage() {}

func (x *Paper) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paper.ProtoReflect.Descriptor instead.
func (*Paper) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{0}
}

func (x *Paper) GetDoi() string {
	if x != nil {
		return x.Doi
	}
	return ""
}

func (x *Paper) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Paper) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Paper) GetIsOa() bool {
	if x != nil {
		return x.IsOa
	}
	return false
}

func (x *Paper) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Paper) GetDoiUrl() string {
	if x != nil {
		return x.DoiUrl
	}
	return ""
}

func (x *Paper) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *Paper) GetOaStatus() string {
	if x != nil {
		return x.OaStatus
	}
	return ""
}

func (x *Paper) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Paper) GetZAuthors() []*Author {
	if x != nil {
		return x.ZAuthors
	}
	return nil
}

func (x *Paper) GetIsParatext() bool {
	if x != nil {
		return x.IsParatext
	}
	return false
}

func (x *Paper) GetJournalName() string {
	if x != nil {
		return x.JournalName
	}
	return ""
}

func (x *Paper) GetOaLocations() []*OpenAccessLocation {
	if x != nil {
		return x.OaLocations
	}
	return nil
}

func (x *Paper) GetDataStandard() int32 {
	if x != nil {
		return x.DataStandard
	}
	return 0
}

func (x *Paper) GetJournalIsOa() bool {
	if x != nil {
		return x.JournalIsOa
	}
	return false
}

func (x *Paper) GetJournalIssns() string {
	if x != nil {
		return x.JournalIssns
	}
	return ""
}

func (x *Paper) GetJournalIssnL() string {
	if x != nil {
		return x.JournalIssnL
	}
	return ""
}

func (x *Paper) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *Paper) GetBestOaLocation() *OpenAccessLocation {
	if x != nil {
		return x.BestOaLocation
	}
	return nil
}

func (x *Paper) GetFirstOaLocation() *OpenAccessLocation {
	if x != nil {
		return x.FirstOaLocation
	}
	return nil
}

func (x *Paper) GetJournalIsInDoai() bool {
	if x != nil {
		return x.JournalIsInDoai
	}
	return false
}

func (x *Paper) GetHasRepositoryCopy() bool {
	if x != nil {
		return x.HasRepositoryCopy
	}
	return false
}

func (x *Paper) GetOaLocationsEmbargoed() []*OpenAccessLocation {
	if x != nil {
		return x.OaLocationsEmbargoed
	}
	return nil
}

func (x *Paper) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Paper) GetGlutton() *Glutton {
	if x != nil {
		return x.Glutton
	}
	return nil
}

func (x *Paper) GetIstexId() string {
	if x != nil {
		return x.IstexId
	}
	return ""
}

func (x *Paper) GetValidFulltextPdf() bool {
	if x != nil {
		return x.ValidFulltextPdf
	}
	return false
}

type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Given       string   `protobuf:"bytes,1,opt,name=given,proto3" json:"given,omitempty"`
	Family      string   `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
	Sequence    string   `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Affiliation []string `protobuf:"bytes,4,rep,name=affiliation,proto3" json:"affiliation,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{1}
}

func (x *Author) GetGiven() string {
	if x != nil {
		return x.Given
	}
	return ""
}

func (x *Author) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Author) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *Author) GetAffiliation() []string {
	if x != nil {
		return x.Affiliation
	}
	return nil
}

type OpenAccessLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	PmhId                 string `protobuf:"bytes,2,opt,name=pmh_id,json=pmhId,proto3" json:"pmh_id,omitempty"`
	IsBest                bool   `protobuf:"varint,3,opt,name=is_best,json=isBest,proto3" json:"is_best,omitempty"`
	License               string `protobuf:"bytes,4,opt,name=license,proto3" json:"license,omitempty"`
	OaDate                string `protobuf:"bytes,5,opt,name=oa_date,json=oaDate,proto3" json:"oa_date,omitempty"`
	Updated               string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	Version               string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Evidence              string `protobuf:"bytes,8,opt,name=evidence,proto3" json:"evidence,omitempty"`
	HostType              string `protobuf:"bytes,9,opt,name=host_type,json=hostType,proto3" json:"host_type,omitempty"`
	EndpointId            string `protobuf:"bytes,10,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	UrlForPdf             string `protobuf:"bytes,11,opt,name=url_for_pdf,json=urlForPdf,proto3" json:"url_for_pdf,omitempty"`
	UrlForLandingPage     string `protobuf:"bytes,12,opt,name=url_for_landing_page,json=urlForLandingPage,proto3" json:"url_for_landing_page,omitempty"`
	RepositoryInstitution string `protobuf:"bytes,13,opt,name=repository_institution,json=repositoryInstitution,proto3" json:"repository_institution,omitempty"`
}

func (x *OpenAccessLocation) Reset() {
	*x = OpenAccessLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAccessLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAccessLocation) ProtoMessage() {}

func (x *OpenAccessLocation) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAccessLocation.ProtoReflect.Descriptor instead.
func (*OpenAccessLocation) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{2}
}

func (x *OpenAccessLocation) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OpenAccessLocation) GetPmhId() string {
	if x != nil {
		return x.PmhId
	}
	return ""
}

func (x *OpenAccessLocation) GetIsBest() bool {
	if x != nil {
		return x.IsBest
	}
	return false
}

func (x *OpenAccessLocation) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *OpenAccessLocation) GetOaDate() string {
	if x != nil {
		return x.OaDate
	}
	return ""
}

func (x *OpenAccessLocation) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *OpenAccessLocation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpenAccessLocation) GetEvidence() string {
	if x != nil {
		return x.Evidence
	}
	return ""
}

func (x *OpenAccessLocation) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *OpenAccessLocation) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

func (x *OpenAccessLocation) GetUrlForPdf() string {
	if x != nil {
		return x.UrlForPdf
	}
	return ""
}

func (x *OpenAccessLocation) GetUrlForLandingPage() string {
	if x != nil {
		return x.UrlForLandingPage
	}
	return ""
}

func (x *OpenAccessLocation) GetRepositoryInstitution() string {
	if x != nil {
		return x.RepositoryInstitution
	}
	return ""
}

type Glutton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                 string         `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Resource            *Resource      `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Member              int32          `protobuf:"varint,3,opt,name=member,proto3" json:"member,omitempty"`
	Issn                []string       `protobuf:"bytes,4,rep,name=issn,proto3" json:"issn,omitempty"`
	ContainerTitle      string         `protobuf:"bytes,5,opt,name=container_title,json=containerTitle,proto3" json:"container_title,omitempty"`
	Issued              *Issued        `protobuf:"bytes,6,opt,name=issued,proto3" json:"issued,omitempty"`
	Author              *Author        `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Doi                 string         `protobuf:"bytes,8,opt,name=doi,proto3" json:"doi,omitempty"`
	IsReferencedByCount int32          `protobuf:"varint,9,opt,name=is_referenced_by_count,json=isReferencedByCount,proto3" json:"is_referenced_by_count,omitempty"`
	Published           *Date          `protobuf:"bytes,10,opt,name=published,proto3" json:"published,omitempty"`
	PublishedPrint      *Date          `protobuf:"bytes,11,opt,name=published_print,json=publishedPrint,proto3" json:"published_print,omitempty"`
	AlternativeId       []string       `protobuf:"bytes,12,rep,name=alternative_id,json=alternativeId,proto3" json:"alternative_id,omitempty"`
	Subject             []string       `protobuf:"bytes,13,rep,name=subject,proto3" json:"subject,omitempty"`
	ContentDomain       *ContentDomain `protobuf:"bytes,14,opt,name=content_domain,json=contentDomain,proto3" json:"content_domain,omitempty"`
	Title               []string       `protobuf:"bytes,15,rep,name=title,proto3" json:"title,omitempty"`
	Link                []*Link        `protobuf:"bytes,16,rep,name=link,proto3" json:"link,omitempty"`
	Source              string         `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
	Type                string         `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	Publisher           string         `protobuf:"bytes,19,opt,name=publisher,proto3" json:"publisher,omitempty"`
	JournalIssue        *JournalIssue  `protobuf:"bytes,20,opt,name=journal_issue,json=journalIssue,proto3" json:"journal_issue,omitempty"`
	Volume              string         `protobuf:"bytes,21,opt,name=volume,proto3" json:"volume,omitempty"`
	ReferencesCount     int32          `protobuf:"varint,22,opt,name=references_count,json=referencesCount,proto3" json:"references_count,omitempty"`
	IssnType            []*IssnType    `protobuf:"bytes,23,rep,name=issn_type,json=issnType,proto3" json:"issn_type,omitempty"`
	Language            string         `protobuf:"bytes,24,opt,name=language,proto3" json:"language,omitempty"`
	Page                string         `protobuf:"bytes,25,opt,name=page,proto3" json:"page,omitempty"`
	ShortContainerTitle []string       `protobuf:"bytes,26,rep,name=short_container_title,json=shortContainerTitle,proto3" json:"short_container_title,omitempty"`
	IstexId             string         `protobuf:"bytes,27,opt,name=istexId,proto3" json:"istexId,omitempty"`
	Ark                 string         `protobuf:"bytes,28,opt,name=ark,proto3" json:"ark,omitempty"`
	OaLink              string         `protobuf:"bytes,29,opt,name=oaLink,proto3" json:"oaLink,omitempty"`
}

func (x *Glutton) Reset() {
	*x = Glutton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Glutton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Glutton) ProtoMessage() {}

func (x *Glutton) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Glutton.ProtoReflect.Descriptor instead.
func (*Glutton) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{3}
}

func (x *Glutton) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Glutton) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Glutton) GetMember() int32 {
	if x != nil {
		return x.Member
	}
	return 0
}

func (x *Glutton) GetIssn() []string {
	if x != nil {
		return x.Issn
	}
	return nil
}

func (x *Glutton) GetContainerTitle() string {
	if x != nil {
		return x.ContainerTitle
	}
	return ""
}

func (x *Glutton) GetIssued() *Issued {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Glutton) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Glutton) GetDoi() string {
	if x != nil {
		return x.Doi
	}
	return ""
}

func (x *Glutton) GetIsReferencedByCount() int32 {
	if x != nil {
		return x.IsReferencedByCount
	}
	return 0
}

func (x *Glutton) GetPublished() *Date {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *Glutton) GetPublishedPrint() *Date {
	if x != nil {
		return x.PublishedPrint
	}
	return nil
}

func (x *Glutton) GetAlternativeId() []string {
	if x != nil {
		return x.AlternativeId
	}
	return nil
}

func (x *Glutton) GetSubject() []string {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Glutton) GetContentDomain() *ContentDomain {
	if x != nil {
		return x.ContentDomain
	}
	return nil
}

func (x *Glutton) GetTitle() []string {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Glutton) GetLink() []*Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Glutton) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Glutton) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Glutton) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Glutton) GetJournalIssue() *JournalIssue {
	if x != nil {
		return x.JournalIssue
	}
	return nil
}

func (x *Glutton) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *Glutton) GetReferencesCount() int32 {
	if x != nil {
		return x.ReferencesCount
	}
	return 0
}

func (x *Glutton) GetIssnType() []*IssnType {
	if x != nil {
		return x.IssnType
	}
	return nil
}

func (x *Glutton) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Glutton) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *Glutton) GetShortContainerTitle() []string {
	if x != nil {
		return x.ShortContainerTitle
	}
	return nil
}

func (x *Glutton) GetIstexId() string {
	if x != nil {
		return x.IstexId
	}
	return ""
}

func (x *Glutton) GetArk() string {
	if x != nil {
		return x.Ark
	}
	return ""
}

func (x *Glutton) GetOaLink() string {
	if x != nil {
		return x.OaLink
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary *Link `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{4}
}

func (x *Resource) GetPrimary() *Link {
	if x != nil {
		return x.Primary
	}
	return nil
}

type Issued struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateParts *Date `protobuf:"bytes,1,opt,name=date_parts,json=dateParts,proto3" json:"date_parts,omitempty"`
}

func (x *Issued) Reset() {
	*x = Issued{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issued) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issued) ProtoMessage() {}

func (x *Issued) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issued.ProtoReflect.Descriptor instead.
func (*Issued) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{5}
}

func (x *Issued) GetDateParts() *Date {
	if x != nil {
		return x.DateParts
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateParts []int32 `protobuf:"varint,1,rep,packed,name=date_parts,json=dateParts,proto3" json:"date_parts,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{6}
}

func (x *Date) GetDateParts() []int32 {
	if x != nil {
		return x.DateParts
	}
	return nil
}

type ContentDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain               []string `protobuf:"bytes,1,rep,name=domain,proto3" json:"domain,omitempty"`
	CrossmarkRestriction bool     `protobuf:"varint,2,opt,name=crossmark_restriction,json=crossmarkRestriction,proto3" json:"crossmark_restriction,omitempty"`
}

func (x *ContentDomain) Reset() {
	*x = ContentDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentDomain) ProtoMessage() {}

func (x *ContentDomain) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentDomain.ProtoReflect.Descriptor instead.
func (*ContentDomain) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{7}
}

func (x *ContentDomain) GetDomain() []string {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *ContentDomain) GetCrossmarkRestriction() bool {
	if x != nil {
		return x.CrossmarkRestriction
	}
	return false
}

type JournalIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue          int32 `protobuf:"varint,1,opt,name=issue,proto3" json:"issue,omitempty"`
	PublishedPrint *Date `protobuf:"bytes,2,opt,name=published_print,json=publishedPrint,proto3" json:"published_print,omitempty"`
}

func (x *JournalIssue) Reset() {
	*x = JournalIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalIssue) ProtoMessage() {}

func (x *JournalIssue) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalIssue.ProtoReflect.Descriptor instead.
func (*JournalIssue) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{8}
}

func (x *JournalIssue) GetIssue() int32 {
	if x != nil {
		return x.Issue
	}
	return 0
}

func (x *JournalIssue) GetPublishedPrint() *Date {
	if x != nil {
		return x.PublishedPrint
	}
	return nil
}

type IssnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *IssnType) Reset() {
	*x = IssnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssnType) ProtoMessage() {}

func (x *IssnType) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssnType.ProtoReflect.Descriptor instead.
func (*IssnType) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{9}
}

func (x *IssnType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IssnType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                 string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ContentType         string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentVersion      string `protobuf:"bytes,3,opt,name=content_version,json=contentVersion,proto3" json:"content_version,omitempty"`
	IntendedApplication string `protobuf:"bytes,4,opt,name=intended_application,json=intendedApplication,proto3" json:"intended_application,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papers_paper_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_papers_paper_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_papers_paper_proto_rawDescGZIP(), []int{10}
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Link) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Link) GetContentVersion() string {
	if x != nil {
		return x.ContentVersion
	}
	return ""
}

func (x *Link) GetIntendedApplication() string {
	if x != nil {
		return x.IntendedApplication
	}
	return ""
}

var File_papers_paper_proto protoreflect.FileDescriptor

var file_papers_paper_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x07, 0x0a, 0x05, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x6f, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x6f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x69, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x7a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x08, 0x7a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x6f, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73, 0x4f, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x73, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73,
	0x73, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x73, 0x73, 0x6e, 0x5f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x6e, 0x4c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x12, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x64, 0x6f, 0x61, 0x69, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73, 0x49, 0x6e, 0x44, 0x6f, 0x61, 0x69, 0x12, 0x2e, 0x0a,
	0x13, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x70, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x49, 0x0a,
	0x16, 0x6f, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6d,
	0x62, 0x61, 0x72, 0x67, 0x6f, 0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x6f, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x67, 0x6c, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x47, 0x6c, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x52, 0x07, 0x67, 0x6c, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x74, 0x65, 0x78, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x73, 0x74, 0x65, 0x78, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x64, 0x66, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x74, 0x65, 0x78,
	0x74, 0x50, 0x64, 0x66, 0x22, 0x74, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x03, 0x0a, 0x12, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6d, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6d, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x62, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x64, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x46, 0x6f,
	0x72, 0x50, 0x64, 0x66, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x75, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x07, 0x0a,
	0x07, 0x47, 0x6c, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x73,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x73, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x69, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0c, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x09, 0x69, 0x73, 0x73, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x49, 0x73, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x74, 0x65, 0x78, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x74,
	0x65, 0x78, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x2b,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x2e, 0x0a, 0x06, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x54, 0x0a, 0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x08, 0x49, 0x73, 0x73, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x97, 0x01, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x5a, 0x0a, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_papers_paper_proto_rawDescOnce sync.Once
	file_papers_paper_proto_rawDescData = file_papers_paper_proto_rawDesc
)

func file_papers_paper_proto_rawDescGZIP() []byte {
	file_papers_paper_proto_rawDescOnce.Do(func() {
		file_papers_paper_proto_rawDescData = protoimpl.X.CompressGZIP(file_papers_paper_proto_rawDescData)
	})
	return file_papers_paper_proto_rawDescData
}

var file_papers_paper_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_papers_paper_proto_goTypes = []any{
	(*Paper)(nil),              // 0: Paper
	(*Author)(nil),             // 1: Author
	(*OpenAccessLocation)(nil), // 2: OpenAccessLocation
	(*Glutton)(nil),            // 3: Glutton
	(*Resource)(nil),           // 4: Resource
	(*Issued)(nil),             // 5: Issued
	(*Date)(nil),               // 6: Date
	(*ContentDomain)(nil),      // 7: ContentDomain
	(*JournalIssue)(nil),       // 8: JournalIssue
	(*IssnType)(nil),           // 9: IssnType
	(*Link)(nil),               // 10: Link
}
var file_papers_paper_proto_depIdxs = []int32{
	1,  // 0: Paper.z_authors:type_name -> Author
	2,  // 1: Paper.oa_locations:type_name -> OpenAccessLocation
	2,  // 2: Paper.best_oa_location:type_name -> OpenAccessLocation
	2,  // 3: Paper.first_oa_location:type_name -> OpenAccessLocation
	2,  // 4: Paper.oa_locations_embargoed:type_name -> OpenAccessLocation
	3,  // 5: Paper.glutton:type_name -> Glutton
	4,  // 6: Glutton.resource:type_name -> Resource
	5,  // 7: Glutton.issued:type_name -> Issued
	1,  // 8: Glutton.author:type_name -> Author
	6,  // 9: Glutton.published:type_name -> Date
	6,  // 10: Glutton.published_print:type_name -> Date
	7,  // 11: Glutton.content_domain:type_name -> ContentDomain
	10, // 12: Glutton.link:type_name -> Link
	8,  // 13: Glutton.journal_issue:type_name -> JournalIssue
	9,  // 14: Glutton.issn_type:type_name -> IssnType
	10, // 15: Resource.primary:type_name -> Link
	6,  // 16: Issued.date_parts:type_name -> Date
	6,  // 17: JournalIssue.published_print:type_name -> Date
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_papers_paper_proto_init() }
func file_papers_paper_proto_init() {
	if File_papers_paper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_papers_paper_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Paper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OpenAccessLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Glutton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Issued); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ContentDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*JournalIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*IssnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papers_paper_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_papers_paper_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_papers_paper_proto_goTypes,
		DependencyIndexes: file_papers_paper_proto_depIdxs,
		MessageInfos:      file_papers_paper_proto_msgTypes,
	}.Build()
	File_papers_paper_proto = out.File
	file_papers_paper_proto_rawDesc = nil
	file_papers_paper_proto_goTypes = nil
	file_papers_paper_proto_depIdxs = nil
}
